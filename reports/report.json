[{"keyword": "Feature", "uri": "tests/features/interviewJson.feature", "name": "JSONS", "id": "tests/features/interviewjson.feature", "line": 1, "description": "", "tags": [], "elements": [{"keyword": "Scenario", "id": "test_jsons", "name": "Number of entries in input matches output_stops", "line": 9, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "I load \"input.csv\"", "line": 4, "match": {"location": ""}, "result": {"status": "passed", "duration": 33133709}}, {"keyword": "And", "name": "I load \"output_stop.csv\"", "line": 5, "match": {"location": ""}, "result": {"status": "passed", "duration": 9214249}}, {"keyword": "And", "name": "I load \"output_order.csv\"", "line": 6, "match": {"location": ""}, "result": {"status": "passed", "duration": 1880374}}, {"keyword": "Then", "name": "Number of entries should match", "line": 10, "match": {"location": ""}, "result": {"status": "failed", "error_message": "fixturefunc = <function do_stuff at 0x1353adda0>, request = <FixtureRequest for <Function test_jsons>>\nkwargs = {'test_data': {'data_path': '/Users/jennifershtaway/Projects/JobSearchAutomation/tests/../tests/data', 'input': [{'tri... 'planned_start_time': '2023-06-09 05:44:00+00', 'planned_end_time': '2023-06-09 15:29:00+00', 'tmw_id': '14204484'}]}}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\ntest_data = {'data_path': '/Users/jennifershtaway/Projects/JobSearchAutomation/tests/../tests/data', 'input': [{'tripHdrNumber': '..., 'planned_start_time': '2023-06-09 05:44:00+00', 'planned_end_time': '2023-06-09 15:29:00+00', 'tmw_id': '14204484'}]}\n\n    @then(\"Number of entries should match\")\n    def do_stuff(test_data):\n>       assert (len(test_data[\"input\"]) == len(test_data[\"output_stop\"]))\nE       AssertionError\n\ntests/steps_def/thens.py:14: AssertionError", "duration": 42042}}]}, {"keyword": "Scenario", "id": "test_jsons2", "name": "Output_order should have one unique entry per input Output_order", "line": 12, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "I load \"input.csv\"", "line": 4, "match": {"location": ""}, "result": {"status": "passed", "duration": 61800209}}, {"keyword": "And", "name": "I load \"output_stop.csv\"", "line": 5, "match": {"location": ""}, "result": {"status": "passed", "duration": 8088124}}, {"keyword": "And", "name": "I load \"output_order.csv\"", "line": 6, "match": {"location": ""}, "result": {"status": "passed", "duration": 1340292}}, {"keyword": "Then", "name": "Output twm is unique and has one per input tmw", "line": 13, "match": {"location": ""}, "result": {"status": "passed", "duration": 2767500}}]}]}]