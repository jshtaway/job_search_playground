[{"keyword": "Feature", "uri": "tests/features/interviewJson.feature", "name": "JSONS", "id": "tests/features/interviewjson.feature", "line": 1, "description": "", "tags": [], "elements": [{"keyword": "Scenario", "id": "test_jsons", "name": "Do stuff with JSONs", "line": 6, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "I load \"random.json\"", "line": 4, "match": {"location": ""}, "result": {"status": "passed", "duration": 358916}}, {"keyword": "When", "name": "I parse an example cucumber report to csv", "line": 7, "match": {"location": ""}, "result": {"status": "failed", "error_message": "fixturefunc = <function parse_example_report at 0x1209fe340>, request = <FixtureRequest for <Function test_jsons>>\nkwargs = {'test_data': {'data_path': '/Users/jennifershtaway/Projects/JobSearchAutomation/tests/../tests/data', 'random': {'id'...i', 'keyZ': 'blah blah blah'}], 'heythere': [{'id': 'asdf', 'keyQ': 'blah blah'}, {'id': 'yuiop', 'keyW': 'blah'}]}]}}}\n\n    def call_fixture_func(\n        fixturefunc: \"_FixtureFunc[FixtureValue]\", request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/site-packages/_pytest/fixtures.py:902: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \ntests/steps_def/whens.py:16: in parse_example_report\n    report = file_ops.load_json(\ntools/file_ops.py:41: in load_json\n    data = json.loads(path)\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x1052f3440>, s = '/Users/jennifershtaway/Projects/JobSearchAutomation/tests/../tests/data/report.json'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py:355: JSONDecodeError", "duration": 42125}}, {"keyword": "And", "name": "Make a test graph", "line": 8, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 291}}, {"keyword": "Then", "name": "Some result is expected", "line": 9, "match": {"location": ""}, "result": {"status": "failed", "error_message": "", "duration": 250}}]}, {"keyword": "Scenario", "id": "test_jsons2", "name": "Do more stuff with JSONs", "line": 11, "description": "", "tags": [], "type": "scenario", "steps": [{"keyword": "Given", "name": "I load \"random.json\"", "line": 4, "match": {"location": ""}, "result": {"status": "passed", "duration": 90499}}, {"keyword": "When", "name": "I do things", "line": 12, "match": {"location": ""}, "result": {"status": "passed", "duration": 15833}}, {"keyword": "And", "name": "Make a test graph", "line": 13, "match": {"location": ""}, "result": {"status": "passed", "duration": 193850792}}, {"keyword": "Then", "name": "Some result is expected", "line": 14, "match": {"location": ""}, "result": {"status": "passed", "duration": 33999}}]}]}]